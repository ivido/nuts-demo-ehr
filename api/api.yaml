openapi: 3.0.0
info:
  title: Nuts Demo EHR API
  version: 1.0.0

paths:
  # Password authentication
  /web/auth/passwd:
    post:
      description: Authenticate using password credential. If successful an authenticated session is created and returned.
      operationId: authenticateWithPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordAuthenticateRequest"
      responses:
        '204':
          description: Authentication successful.
        '403':
          description: Invalid credentials
  # IRMA authentication
  /web/auth/irma/session:
    post:
      operationId: authenticateWithIRMA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IRMAAuthenticationRequest"
      responses:
        '200':
          description: A session was succesfully created
          content:
            application/json:
              schema:
                type: object
  /web/auth/irma/session/{sessionToken}/result:
    parameters:
      - name: sessionToken
        in: path
        description: IRMA session ID
        required: true
        schema:
          type: string
    get:
      operationId: getIRMAAuthenticationResult
      responses:
        '200':
          description: Session result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionToken"

  # General authentication endpoints
  /web/private:
    get:
      description: Checks whether the current session is valid. If not, the client should authenticate before calling other API operations.
      operationId: checkSession
      responses:
        '204':
          description: The session is valid.
        '400':
          description: The session is invalid.

  /web/customers:
    get:
      operationId: listCustomers
      responses:
        200:
          description: returns a list of customers as configured in the customers.json file
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Customer"
  /web/private/patient/{patientID}:
    parameters:
      - name: patientID
        in: path
        description: The patient id
        required: true
        schema:
          type: string
    get:
      operationId: getPatient
      description: Get the patient by indicated by the patientID
      responses:
        200:
          description: The requested patient
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
    put:
      operationId: updatePatient
      description: Update the patient indicated by the patientID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatientProperties"
      responses:
        200:
          description: Update successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
  /web/private/patients:
    get:
      operationId: getPatients
      responses:
        200:
          description: A list of patients for the current customer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Patient"
    post:
      operationId: newPatient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatientProperties"
      responses:
        200:
          description: Succesful creation of a new Patient
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"

components:
  schemas:
    Customer:
      type: object
      description: A customer object.
      required:
        - id
        - name
        - active
      properties:
        id:
          type: string
          description: The internal customer ID.
          example: "C12"
        did:
          type: string
          description: The customer DID.
          example:
            "did:nuts:123"
        name:
          type: string
          description: Internal name for this customer.
        city:
          type: string
          description: Locality for this customer.
        domain:
          type: string
          description: The email domain of the care providers employees, required for logging in.
        active:
          type: boolean
          description: If a VC has been issued for this customer.
    PatientID:
      description: The ID of the patient. E.g. UUID or database increment.
      type: string
      example:
        - 15
        - 665d6390-4823-4829-a3bf-4257e0b67992
    Patient:
      allOf:
        - $ref: "#/components/schemas/PatientID"
        - $ref: "#/components/schemas/PatientProperties"
    PatientProperties:
      type: object
      description: |
        A patient in the EHR system. Containing the basic information about the like name, adress, dob etc.
      required:
        - internalID
        - firstName
        - surname
        - gender
        - zipcode
      properties:
        internalID:
          description: The internal ID of the Patient. Can be any internal system. Not to be confused by a database ID or a uuid.
          type: string
          example: P001
        ssn:
          description: Social security number
          type: string
          example: 99999880
        firstName:
          description: Given name
          type: string
          example: Jan
        surname:
          description: Family name. Must include prefixes like "van der".
          type: string
          example: van der Moolen
        gender:
          description: Gender of the person according to https://www.hl7.org/fhir/valueset-administrative-gender.html.
          type: string
          enum: [male, female, other, unknown]
          default: unknown
        dob:
          description: Date of birth. Can include time if known.
          type: string
          format: date
          example: "1986-01-30"
        zipcode:
          description: The zipcode formatted in dutch form. Can be used to find local care providers.
          type: string
          example: 7511AB
        email:
          description: Primary email address.
          type: string
          format: email
    SessionToken:
      type: object
      description: Result of a signing session.
      required:
        - token
      properties:
        token:
          type: string
          description: the result from a signing session. It's a base64 encoded Verifiable Presentation
    IRMAAuthenticationRequest:
      required:
        - customerID
      properties:
        customerID:
          description: Internal ID of the customer for which is being logged in
          type: string
          example: 1
    PasswordAuthenticateRequest:
      required:
        - customerID
        - password
      properties:
        customerID:
          description: Internal ID of the customer for which is being logged in
          type: string
          example: 1
        password:
          type: string
